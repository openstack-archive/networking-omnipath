[tox]
minversion = 2.0
envlist = py35,py27,pep8
skipsdist = True

[testenv]
usedevelop = True
install_command = pip install {opts} {packages}
setenv =
   VIRTUAL_ENV={envdir}
   PYTHONWARNINGS=default::DeprecationWarning
deps = -c{env:UPPER_CONSTRAINTS_FILE:https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt}
       -r{toxinidir}/requirements.txt
       -r{toxinidir}/test-requirements.txt
whitelist_externals = bash
                      rm
commands = stestr run {posargs}
passenv = http_proxy HTTP_PROXY https_proxy HTTPS_PROXY no_proxy NO_PROXY

[testenv:pep8]
basepython = python3
envdir = {toxworkdir}/shared
commands = flake8
           {toxinidir}/tools/coding-checks.sh --pylint '{posargs}'
           doc8 doc/source devstack releasenotes/source

[testenv:venv]
basepython = python3
commands = {posargs}

[testenv:dsvm]
# Fake job to define environment variables shared between dsvm jobs
setenv = OS_TEST_TIMEOUT=240
         OS_LOG_PATH={env:OS_LOG_PATH:/opt/stack/logs}
commands = false

[testenv:functional]
setenv =
  {[testenv]setenv}
  OS_TEST_PATH=./omnipath/tests/functional
  OS_TEST_TIMEOUT=240
deps = {[testenv]deps}
       -r{toxinidir}/omnipath/tests/functional/requirements.txt

[testenv:functional-py35]
basepython = python3.5
setenv =
  {[testenv]setenv}
  OS_TEST_PATH=./omnipath/tests/functional
  OS_TEST_TIMEOUT=240
deps = {[testenv]deps

[testenv:dsvm-functional]
setenv = {[testenv:functional]setenv}
         {[testenv:dsvm]setenv}
deps = {[testenv:functional]deps}

[testenv:dsvm-functional-py35]
basepython = python3.5
setenv = {[testenv:functional]setenv}
         {[testenv:dsvm]setenv}
deps = {[testenv:functional]deps}

[testenv:cover]
basepython = python3
setenv =
  {[testenv]setenv}
  PYTHON=coverage run --source omnipath --parallel-mode
commands =
  stestr run --no-subunit-trace {posargs}
  coverage combine
  coverage report --skip-covered
  coverage html -d cover
  coverage xml -o cover/coverage.xml

[testenv:docs]
basepython = python3
commands =
  rm -rf doc/build
  doc8 doc/source devstack releasenotes/source
  sphinx-build -W -b html doc/source doc/build/html

[testenv:debug]
basepython = python3
setenv = {[testenv]setenv}
         OS_LOG_CAPTURE={env:OS_LOG_CAPTURE:0}
         OS_STDOUT_CAPTURE={env:OS_STDOUT_CAPTURE:0}
         OS_STDERR_CAPTURE={env:OS_STDERR_CAPTURE:0}
         OS_TEST_TIMEOUT={env:OS_TEST_TIMEOUT:0}
commands = oslo_debug_helper -t omnipath/tests {posargs}

[testenv:debug-py27]
basepython = python2.7
setenv = {[testenv]setenv}
         {[testenv:debug]setenv}
commands = {[testenv:debug]commands}

[testenv:debug-py35]
basepython = python3.5
setenv = {[testenv]setenv}
         {[testenv:debug]setenv}
commands = {[testenv:debug]commands}

[testenv:genconfig]
commands =
    mkdir -p etc/neutron/plugins/ml2
    oslo-config-generator --config-file etc/oslo-config-generator/ml2_omnipath.ini
whitelist_externals = mkdir

[testenv:releasenotes]
basepython = python3
commands = sphinx-build -a -E -W -d releasenotes/build/doctrees -b html releasenotes/source releasenotes/build/html

[doc8]
# File extensions to check
extensions = .rst

[flake8]
# E123, E125 skipped as they are invalid PEP-8.
# TODO(dougwig) -- uncomment this to test for remaining linkages
# N530 direct neutron imports not allowed

show-source = True
ignore = E123,E125,N530
exclude=.venv,.git,.tox,dist,doc,*lib/python*,*egg,build,.tmp
import-order-style = pep8

[hacking]
import_exceptions = omnipath
local-check-factory = neutron_lib.hacking.checks.factory

[testenv:lower-constraints]
basepython = python3
deps =
  -c{toxinidir}/lower-constraints.txt
  -r{toxinidir}/test-requirements.txt
  -r{toxinidir}/requirements.txt

[testenv:bandit]
basepython = python3
envdir = {toxworkdir}/shared
deps = -r{toxinidir}/test-requirements.txt
commands = bandit -r omnipath -x tests -n5

[testenv:dev]
# run locally (not in the gate) using editable mode
# https://pip.pypa.io/en/stable/reference/pip_install/#editable-installs
commands =
    pip install -q -e "git+https://git.openstack.org/openstack/neutron#egg=neutron"

[testenv:py3-dev]
basepython = python3
commands =
    {[testenv:dev]commands}
    {[testenv]commands}

[testenv:pep8-dev]
basepython = python3
deps =
    {[testenv]deps}
commands =
    {[testenv:dev]commands}
    {[testenv:pep8]commands}
